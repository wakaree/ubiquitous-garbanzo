
import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

import config

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(handlers=(logging.FileHandler('logs.txt', encoding='utf-8'), logging.StreamHandler()),
                    format='[%(asctime)s] %(levelname)s | %(name)s.%(module)s: %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S',
                    level=logging.INFO)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–æ—Ç—É
bot = Bot(token=config.API_TOKEN, parse_mode='html')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class UserState(StatesGroup):
    name_input = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏


# –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def startup_func(_):
    logging.info("Gl√ºckliches neues Jahr!")


@dp.message_handler(commands=['start', 'welcome'])
async def start_commands(message: types.Message):
    await message.answer(f"üëã <b>–ü—Ä–∏–≤–µ—Ç, <a href='tg://user?id={message.from_user.id}'>{message.from_user.full_name}</a></b>")
    await message.answer(f"‚ùì <b>–ú–æ–≥—É –ª–∏ —è —É–∑–Ω–∞—Ç—å –í–∞—à–µ –∏–º—è?</b>")
    await UserState.name_input.set()


@dp.message_handler(state=UserState.name_input)
async def getusername(message: types.Message, state: FSMContext):
    await message.answer(f"ü•Ç <b> –° –ù–æ–≤—ã–º –≥–æ–¥–æ–º, <a href='tg://user?id={message.from_user.id}'>{message.text.title()}</a>!</b>")
    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=startup_func)
